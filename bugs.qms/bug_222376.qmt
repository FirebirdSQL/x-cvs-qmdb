<?xml version="1.0" ?>
<extension class="firebird.FirebirdTestBase" kind="test"><argument name="bug_id"><text>222376</text></argument><argument name="prerequisites"><set/></argument><argument name="target_group"><text>.*</text></argument><argument name="description"><text>Category     : Core Engine
Group        : Confirmed Bug
Status       : Open
Resolution   : None
Submitted By : robocop
Assigned to  : nobody
----------------------
This appeared in kinobi.ibconsole. I'm not sure what BUG GROUP it should be, so I've logged it as a request for enhancement. My comments at the bottom.

From Eric Grange:
I have encountered an &quot;unknown error&quot; in IBConsole ISQL window when the
query plan returned by IB is particularly long. I have an autogenerated
request that looks like :

select distinct doc.id docID, doc.directory directoryID 
from documents doc, DOC_APPLICATION docAppl
where (docAppl.DOC_ID=doc.ID) and
(docAppl.SITE_ID=2 or docAppl.SITE_ID=7 or docAppl.SITE_ID=25 or ....)

the corresponding plan is 

PLAN SORT (JOIN (DOC NATURAL,DOCAPPL INDEX
(RDB$FOREIGN122,RDB$FOREIGN123,RDB$FOREIGN123,RDB$FOREIGN123,RDB$FOREIGN123...)))

And an &quot;RDB$FOREIGN123&quot; is added for each additionnal &quot; or docAppl.SITE_ID=&quot;
in the query. In one particular circumstance the query gets particularly long
and the corresponding plan as well... In that case I'm getting the 
&quot;unknown error&quot; in ISQL (the records are fetched and presented in the dbgrid,
statistics are here, but &quot;plan&quot; is empty).

And yes, IB does a very poor job at generating the plan in this particular
case, the optimal plan is just 

PLAN SORT (JOIN (DOC NATURAL,DOCAPPL INDEX (RDB$FOREIGN122,RDB$FOREIGN123))

which speeds the request quite a lot...

Eric Grange
=======END OF ORIGINAL MSG=======

   Well, for me it's clear that the only problem related to IBConsole is the error msg because a plan can't be obtained, but this is a Core Engine Bug.
   Each time an OR sentence is put on the same field and such field is indexed, the plan is enlarged to use again the same index, so 40 clauses separated by OR make the underlying index to be used 40 times. This is the bad side of &quot;IB being able to use multiple indexes on the same table to satisfy a query&quot;.
  Worse, at some point, IB doesn't return any plan. Does IB give up at this time? What plan does it uses after that threshold is met? It still return results. See this boring example, please. The advantage over the original one seen above is that it can be done with system tables:
select * from rdb$indices
where rdb$index_name = 'F'
or rdb$index_name = 'A'
or rdb$index_name = 'B'
or rdb$index_name = 'C'
or rdb$index_name = 'd'
or rdb$index_name = 'e'
or rdb$index_name = 'f'
or rdb$index_name = 'g'
or rdb$index_name = 'h'
or rdb$index_name = 'i'
or rdb$index_name = 'j'
or rdb$index_name = 'K'
or rdb$index_name = 'l'
or rdb$index_name = 'm'
or rdb$index_name = 'n'
or rdb$index_name = 'o'
or rdb$index_name = 'p'
or rdb$index_name = 'q'
or rdb$index_name = 'r'
or rdb$index_name = 's'
or rdb$index_name = 't'
or rdb$index_name = 'u'
or rdb$index_name = 'v'
or rdb$index_name = 'w'
or rdb$index_name = 'x'
or rdb$index_name = 'y'
or rdb$index_name = 'z'
   Ask IBConsole to show the plan by pressing Prepare. Horrible? Okay. Use SET PLAN in isql.exe to show the plan. The sentence is executed and the same plan is returned. Copy the 26 ORed lines as a chunk and paste them at the bottom. Examine the plan. Worse. Do the same paste operation 5 times. Now, IBConsole doesn't show a PLAN if the statement is prepared. If it's executed, it shows a msg because it can't get the plan. The isql.exe utility doesn't show a plan and neither IB_WISQL can retrieve such plan. However, the statement is executed. Is this due to a lack of enough space to return a plan in the predefined area used by the API or does IB abandon any plan at this time?

C.

----------------------
User: davidzv
Logged In: YES 
user_id=754563

I don't this this is an optimizer bug.  In order to evaluate any 
particular part of the predicate 
&quot;... or rdb$index_name = 'v' 
or rdb$index_name = 'w' 
or rdb$index_name = 'x' 
or rdb$index_name = 'y' 
or rdb$index_name = 'z' ... &quot;

the optimizer MUST necessarily start at the base of the index 
tree EACH TIME and search for each specific node.  The fact 
that the query already searches for &quot;rdb$index_name = 'V'&quot; 
would not make a subsequent search for &quot;rdb$index_name = 
'x' &quot; more efficient because 'x' has no particular relationship to 
'V'. If 'V' is smaller than 'x', it doesn't let the optimizer scoot 
over from the node pointing to 'x' directly towards the correct 
branch of the tree pointing to 'V'.  That information can only 
be found at the base node of the index. 

If you check the actual statistics of this query with WISQL, 
you will see the number of fetches scaling proportionatly to 
the number of OR predicates.  This is exactly what I would 
have predicted myself.

Maybe I'm missing something, but as far as I know, it isn't 
possible to find 26 specific values from an index without 
starting at the base of the index and searching 26 times.  

I dont think an index operation of 'Search for X and while you 
are at it search for V for free' exists. I dont know if a 'Search 
for X and search for V for cheap' even exists, let alone 'Search 
for X and V and B and C and E and G and I and L all for the 
price of 1 search' exists.

I think the best the optimizer could ever HOPE to do is make 
a decision for skip the index completely and perform a natural 
scan where there are too many OR predicates compared to 
the total number of rows in the table.   

Please correct me if I'm wrong.

----------------------
User: robocop
I'm decoupling Frank's contribution from this feature request because his report is to me more critical than mine here (it's a bug, not a performance penalty like this) and hence it deserves a separate number. I will post myself such bug report, too.

C.

----------------------
User: robocop
   Frank, maybe we are logging bugs faster than the interested people can read and comment them. :-)
   I'm not sure if the issue Paul B. brought to my attention (and that you filled here) is the same bug or has exactly the same roots than the original issue I logged under this name. Personally, I would decouple them: I logged a problem with apparently bad plans. However, correct results (record set) are produced. You appended to this the other case, where a typical plan is produced but some fields' values are dropped and rendered as NULL after a SORT. Personally, I would prefer that you log the issue separately.
   It's not about protagonism. What I'm saying is that the issue we examined one day ago and that you appended here is enough important to be logged separately. This is the first time I observe an ORDER BY that can cause a lot of fields to become NULL, even if the plan looks good! Worse, the stored procedure I offered as alternative, works okay even if you observe that both the original view and the workaround selectable proc both seem to be using the same query plan. And the plan looks acceptable.

C.

----------------------
User: fsg
I have seen sth. similar yesterday. I got a test database where isql
refused to show the plan for a select on a view. IB_WISQL is trying 
harder and displays a truncated plan. And even worse, if you add an
ORDER BY clause to the SELECT statement, IB will return wrong results.

Here is the original message from interbase.public.general 
that led me to this ugly thing:

From: Jan Bakuwel &lt;jan.bakuwel@ams.greenpeace.org&gt;
Subject: InterBase 6 - serious bug or &quot;feature&quot; ?
Date: Sun, 12 Nov 2000 20:52:27 +0100


Hoi all,

Perhaps it's my lack of knowledge of the SQL92 standard, however I think
I ran into a very serious bug in InterBase. Any ideas, hints, etc are
very welcome (this will stop me from applying InterBase successfully).

Consider a database with 5 tables and a couple of views, one of those
views is called v_observation. Consider two queries (you can try them
with IBConsole):

select * from v_observation

select * from v_observation order by iobservationagree desc

These two queries return different (!) results. And not just the
order.... It seems InterBase has trouble dealing with NULL values that
are returned and, in the second case, completely omit the infomation
retrieved from the database. I have the same database in Access ... and
everything works perfect (exactly like expected) there!
You don't believe it ? You can download the database here:

http://www.greenpeace.org/~jbakuwel/db_linux.zip (gzipped)
http://www.greenpeace.org/~jbakuwel/db_win.zip (zipped)

Hope to hear from some of you....if not too much trouble please also
send you reply to my email address...

kind regards,
Jan
Greenpeace- Information Technology</text></argument><argument name="title"><text>Horrible plan with a lot of OR conditions</text></argument><argument name="author"><text>pcisar</text></argument><argument name="test_type"><enumeral>Positive</enumeral></argument><argument name="test_id"><text>bug_222376</text></argument><argument name="resources"><set/></argument></extension>