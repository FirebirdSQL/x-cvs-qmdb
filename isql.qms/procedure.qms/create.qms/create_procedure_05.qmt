<?xml version="1.0" ?>
<extension class="firebird.FirebirdISQLTest" kind="test"><argument name="bug_id"><text/></argument><argument name="stdin"><text>CREATE DATABASE &quot;$(DATABASE_LOCATION)test.gdb&quot; ;
CREATE EXCEPTION test 'test exception';
CREATE TABLE tb(id INT, text VARCHAR(32));
SET TERM ^;
CREATE PROCEDURE dummy (id INT) AS
BEGIN
  id=id;
END ^

CREATE PROCEDURE dummy2 (id INT) RETURNS(newID INT) AS
BEGIN
  newid=id;
END ^

CREATE PROCEDURE test
AS
DECLARE VARIABLE p1 SMALLINT;
BEGIN
/* Comments */
  p1=1+1;                           /* assigment */
  EXCEPTION test;                   /* Exception */
  EXECUTE PROCEDURE dummy(:p1);    /* Call SP   */
  EXECUTE PROCEDURE dummy2(:p1) RETURNING_VALUES :p1;
  EXECUTE PROCEDURE test;         /*recursive call */
  EXIT;
  FOR SELECT id FROM tb INTO :p1 DO BEGIN
    p1=p1+2;
  END
  INSERT INTO tb(id) VALUES(:p1);
  UPDATE tb SET text='new text' WHERE id=:p1;
  DELETE FROM tb WHERE text=:p1+1;
  SELECT id FROM tb WHERE text='ggg' INTO :p1;
  IF(p1 IS NOT NULL)THEN BEGIN
    p1=NULL;
  END
  IF(p1 IS NULL)THEN p1=2;
    ELSE BEGIN
    p1=2;
  END
  POST_EVENT 'My Event';
  POST_EVENT p1;
  WHILE(p1&gt;30)DO BEGIN
   p1=p1-1;
  END
  BEGIN
    EXCEPTION test;
    WHEN ANY DO p1=45;
  END
END ^
SET TERM ;^
SHOW PROCEDURE test;

DROP DATABASE;
</text></argument><argument name="description"><text>BUG in doc: &quot;POST_EVENT event_name | col&quot; should be &quot;POST_EVENT event_name | variable&quot;

CREATE PROCEDURE - PSQL Stataments

Dependencies:
CREATE DATABASE
CREATE EXCEPTION
CREATE TABLE
</text></argument><argument name="author"><text>skopalik</text></argument><argument name="prerequisites"><set/></argument><argument name="test_type"><enumeral>Positive</enumeral></argument><argument name="stdout"><text>Procedure text:
=============================================================================

DECLARE VARIABLE p1 SMALLINT;
BEGIN
/* Comments */
  p1=1+1;                           /* assigment */
  EXCEPTION test;                   /* Exception */
  EXECUTE PROCEDURE dummy(:p1);    /* Call SP   */
  EXECUTE PROCEDURE dummy2(:p1) RETURNING_VALUES :p1;
  EXECUTE PROCEDURE test;         /*recursive call */
  EXIT;
  FOR SELECT id FROM tb INTO :p1 DO BEGIN
    p1=p1+2;
  END
  INSERT INTO tb(id) VALUES(:p1);
  UPDATE tb SET text='new text' WHERE id=:p1;
  DELETE FROM tb WHERE text=:p1+1;
  SELECT id FROM tb WHERE text='ggg' INTO :p1;
  IF(p1 IS NOT NULL)THEN BEGIN
    p1=NULL;
  END
  IF(p1 IS NULL)THEN p1=2;
    ELSE BEGIN
    p1=2;
  END
  POST_EVENT 'My Event';
  POST_EVENT p1;
  WHILE(p1&gt;30)DO BEGIN
   p1=p1-1;
  END
  BEGIN
    EXCEPTION test;
    WHEN ANY DO p1=45;
  END
END
=============================================================================
Parameters:

</text></argument><argument name="exit_code"><integer>0</integer></argument><argument name="substitutions"><set/></argument><argument name="environment"><set/></argument><argument name="resources"><set/></argument><argument name="stderr"><text/></argument><argument name="title"><text>CREATE PROCEDURE - PSQL Stataments</text></argument><argument name="test_id"><text>skopalik_0160</text></argument><argument name="target_group"><text>.*</text></argument></extension>