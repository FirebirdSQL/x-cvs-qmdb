<?xml version="1.0" ?>
<!DOCTYPE extension
  PUBLIC '-//QM/2.1.2/Extension//EN'
  'http://www.codesourcery.com/qm/dtds/2.1.2/-//qm/2.1.2/extension//en.dtd'>
<extension class="fbqa.FirebirdTest" kind="test"><argument name="create_db_method"><enumeral>Create New</enumeral></argument><argument name="user_password"><text>masterkey</text></argument><argument name="sql_dialect"><enumeral>3</enumeral></argument><argument name="result_string"><text>Triggers on Table TB:
TEST, Sequence: 0, Type: BEFORE INSERT, Active
AS
DECLARE VARIABLE v1 SMALLINT;
DECLARE VARIABLE v2 INTEGER;
DECLARE VARIABLE v3 FLOAT;
DECLARE VARIABLE v4 DOUBLE PRECISION;
DECLARE VARIABLE v5 DECIMAL;
DECLARE VARIABLE v6 DECIMAL(4);
DECLARE VARIABLE v7 DECIMAL(4,2);
DECLARE VARIABLE v8 NUMERIC;
DECLARE VARIABLE v9 NUMERIC(5);
DECLARE VARIABLE v10 NUMERIC(5,3);
DECLARE VARIABLE v11 DATE;
DECLARE VARIABLE v12 TIME;
DECLARE VARIABLE v13 TIMESTAMP;
DECLARE VARIABLE v14 CHAR(1200);
DECLARE VARIABLE v15 CHAR(2000) CHARACTER SET WIN1250;
DECLARE VARIABLE v16 CHARACTER(3400);
DECLARE VARIABLE v17 CHARACTER VARYING(300);
DECLARE VARIABLE v18 NCHAR(1);
DECLARE VARIABLE v19 NATIONAL CHARACTER(30);
DECLARE VARIABLE v20 NATIONAL CHAR(130);
DECLARE VARIABLE v21 NATIONAL CHAR VARYING(30);
BEGIN
  BEGIN         /* Begin end */
    new.id=1;
  END
  v1=v2+34/3;   /* var assigment */
  /* comment */
  EXCEPTION test;
  EXECUTE PROCEDURE test(3) RETURNING_VALUES :v3;
  FOR SELECT id FROM tb INTO :v1 DO v2=v2+1;
  SELECT id FROM tb INTO :v2;
  UPDATE tb SET id=1;
  DELETE FROM tb;
  INSERT INTO tb(id)VALUES(3);
  IF(v10 IS NULL)THEN v1=2; ELSE v1=3;
  new.id=v4;
  POST_EVENT 'test';
  POST_EVENT v1;
  WHILE(v2&lt;v4)DO BEGIN
    v3=v1;
  END
  WHEN ANY DO v21=4;
END
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
</text></argument><argument name="character_set"><enumeral>NONE</enumeral></argument><argument name="title"><text>CREATE TRIGGER BEFORE INSERT DECLARE VARIABLE, block stataments</text></argument><argument name="page_size"><enumeral>Default</enumeral></argument><argument name="substitutions"><set/></argument><argument name="backup_file_path"><text/></argument><argument name="user_name"><text>SYSDBA</text></argument><argument name="resources"><set/></argument><argument name="expected_stderr"><text/></argument><argument name="target_version"><text>1.0</text></argument><argument name="description"><text>CREATE TRIGGER BEFORE INSERT DECLARE VARIABLE, block stataments

Dependencies:
CREATE DATABASE
CREATE TABLE
CREATE EXCEPTION
CREATE PROCEDURE
</text></argument><argument name="target_group"><text>.*</text></argument><argument name="populate_method"><enumeral>Using SQL Commands</enumeral></argument><argument name="bug_id"><text/></argument><argument name="data_tuple"><text/></argument><argument name="db_name"><text>trigger_test.fdb</text></argument><argument name="isql_script"><text>CREATE TABLE tb(id INT);
CREATE EXCEPTION test 'test exception';
commit;</text></argument><argument name="source_code"><text>SET TERM ^;
CREATE PROCEDURE test (id INT) RETURNS(d FLOAT)AS
BEGIN
  d=id+3.14;
END ^

CREATE TRIGGER test FOR tb BEFORE INSERT AS
DECLARE VARIABLE v1 SMALLINT;
DECLARE VARIABLE v2 INTEGER;
DECLARE VARIABLE v3 FLOAT;
DECLARE VARIABLE v4 DOUBLE PRECISION;
DECLARE VARIABLE v5 DECIMAL;
DECLARE VARIABLE v6 DECIMAL(4);
DECLARE VARIABLE v7 DECIMAL(4,2);
DECLARE VARIABLE v8 NUMERIC;
DECLARE VARIABLE v9 NUMERIC(5);
DECLARE VARIABLE v10 NUMERIC(5,3);
DECLARE VARIABLE v11 DATE;
DECLARE VARIABLE v12 TIME;
DECLARE VARIABLE v13 TIMESTAMP;
DECLARE VARIABLE v14 CHAR(1200);
DECLARE VARIABLE v15 CHAR(2000) CHARACTER SET WIN1250;
DECLARE VARIABLE v16 CHARACTER(3400);
DECLARE VARIABLE v17 CHARACTER VARYING(300);
DECLARE VARIABLE v18 NCHAR(1);
DECLARE VARIABLE v19 NATIONAL CHARACTER(30);
DECLARE VARIABLE v20 NATIONAL CHAR(130);
DECLARE VARIABLE v21 NATIONAL CHAR VARYING(30);
BEGIN
  BEGIN         /* Begin end */
    new.id=1;
  END
  v1=v2+34/3;   /* var assigment */
  /* comment */
  EXCEPTION test;
  EXECUTE PROCEDURE test(3) RETURNING_VALUES :v3;
  FOR SELECT id FROM tb INTO :v1 DO v2=v2+1;
  SELECT id FROM tb INTO :v2;
  UPDATE tb SET id=1;
  DELETE FROM tb;
  INSERT INTO tb(id)VALUES(3);
  IF(v10 IS NULL)THEN v1=2; ELSE v1=3;
  new.id=v4;
  POST_EVENT 'test';
  POST_EVENT v1;
  WHILE(v2&lt;v4)DO BEGIN
    v3=v1;
  END
  WHEN ANY DO v21=4;
END^
SET TERM ;^
SHOW TRIGGER test;</text></argument><argument name="test_id"><text>pcisar_212</text></argument><argument name="target_platform"><text>All</text></argument><argument name="insert_statement"><text/></argument><argument name="test_expr"><text/></argument><argument name="statement_type_and_result"><enumeral>SQL: String</enumeral></argument><argument name="prerequisites"><set/></argument><argument name="author"><text>pcisar:sskopalik</text></argument><argument name="drop_db"><enumeral>true</enumeral></argument><argument name="db_path_property"><text>database_location</text></argument></extension>