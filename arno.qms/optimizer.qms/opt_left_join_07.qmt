<?xml version="1.0" ?>
<!DOCTYPE extension
  PUBLIC '-//QM/2.2/Extension//EN'
  'http://www.codesourcery.com/qm/dtds/2.2/-//qm/2.2/extension//en.dtd'>
<extension class="fbqa.FirebirdTest" kind="test"><argument name="create_db_method"><enumeral>Create New</enumeral></argument><argument name="user_password"><text>masterkey</text></argument><argument name="sql_dialect"><enumeral>3</enumeral></argument><argument name="result_string"><text>PLAN JOIN (JOIN (JOIN (F NATURAL,C1 INDEX (PK_COLORS)),C2 INDEX (PK_COLORS)),C3 INDEX (PK_COLORS))

     COLORID      COLORID      COLORID      COLORID 
============ ============ ============ ============ 

           1            1            1            1 
           2            2            2            2 
           0            0            0            0 
</text></argument><argument name="character_set"><enumeral>NONE</enumeral></argument><argument name="title"><text>4 JOINed tables with 1 LEFT OUTER JOIN</text></argument><argument name="page_size"><enumeral>Default</enumeral></argument><argument name="substitutions"><set/></argument><argument name="backup_file_path"><text/></argument><argument name="user_name"><text>SYSDBA</text></argument><argument name="resources"><set/></argument><argument name="expected_stderr"><text/></argument><argument name="target_version"><text>1.5</text></argument><argument name="description"><text>A INNER JOINed TableD to a LEFT JOINed TableC should be able to access the outer TableB of TableC. Also TableB is INNER JOINed to TableA. Three indexes can and should be used here.
</text></argument><argument name="target_group"><text>.*</text></argument><argument name="populate_method"><enumeral>Using SQL Commands</enumeral></argument><argument name="bug_id"><text/></argument><argument name="data_tuple"><text/></argument><argument name="db_name"><text>left_join.fdb</text></argument><argument name="isql_script"><text>CREATE TABLE Colors (
  ColorID INTEGER NOT NULL,
  ColorName VARCHAR(20)
);

CREATE TABLE Flowers (
  FlowerID INTEGER NOT NULL,
  FlowerName VARCHAR(30),
  ColorID INTEGER
);

COMMIT;

/* Value 0 represents -no value- */
INSERT INTO Colors (ColorID, ColorName) VALUES (0, 'Not defined');
INSERT INTO Colors (ColorID, ColorName) VALUES (1, 'Red');
INSERT INTO Colors (ColorID, ColorName) VALUES (2, 'Yellow');

/* insert some data with references */
INSERT INTO Flowers (FlowerID, FlowerName, ColorID) VALUES (1, 'Rose', 1);
INSERT INTO Flowers (FlowerID, FlowerName, ColorID) VALUES (2, 'Tulip', 2);
INSERT INTO Flowers (FlowerID, FlowerName, ColorID) VALUES (3, 'Gerbera', 0);

/* Normally these indexes are created by the primary/foreign keys,
   but we don't want to rely on them for this test */
CREATE UNIQUE ASC INDEX PK_Colors ON Colors (ColorID);
CREATE UNIQUE ASC INDEX PK_Flowers ON Flowers (FlowerID);
CREATE ASC INDEX FK_Flowers_Colors ON Flowers (ColorID);

COMMIT;
</text></argument><argument name="source_code"><text>SET PLAN ON;
/* 4 joined tables with 1 LEFT JOIN */
SELECT
  f.ColorID,
  c1.ColorID,
  c2.ColorID,
  c3.ColorID
FROM
  Flowers f
  JOIN Colors c1 ON (c1.ColorID = f.ColorID)
  LEFT JOIN Colors c2 ON (c2.ColorID = c1.ColorID)
  JOIN Colors c3 ON (c3.ColorID = c1.ColorID);
</text></argument><argument name="test_id"><text>opt_left_join_07</text></argument><argument name="target_platform"><text>All</text></argument><argument name="insert_statement"><text/></argument><argument name="test_expr"><text/></argument><argument name="statement_type_and_result"><enumeral>SQL: String</enumeral></argument><argument name="prerequisites"><set/></argument><argument name="author"><text>arno.brinkman</text></argument><argument name="drop_db"><enumeral>true</enumeral></argument><argument name="db_path_property"><text>database_location</text></argument></extension>