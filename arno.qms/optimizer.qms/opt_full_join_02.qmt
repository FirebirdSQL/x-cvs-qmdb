<?xml version="1.0" ?>
<!DOCTYPE extension
  PUBLIC '-//QM/2.2/Extension//EN'
  'http://www.codesourcery.com/qm/dtds/2.2/-//qm/2.2/extension//en.dtd'>
<extension class="fbqa.FirebirdTest" kind="test"><argument name="create_db_method"><enumeral>Create New</enumeral></argument><argument name="user_password"><text>masterkey</text></argument><argument name="sql_dialect"><enumeral>3</enumeral></argument><argument name="result_string"><text>PLAN SORT (JOIN (C NATURAL,JOIN (RC NATURAL,R INDEX (PK_RELATIONS))))

RELATIONNAME                          RELATIONID   CATEGORYID DESCRIPTION          
=================================== ============ ============ ==================== 

Racing turtle                                  3            1 Relation             
Bakery garbage                                 2            2 Debtor               
Bakery garbage                                 2            1 Relation             
Folding air-hook shop                     &lt;null&gt;       &lt;null&gt; &lt;null&gt;               
</text></argument><argument name="character_set"><enumeral>NONE</enumeral></argument><argument name="title"><text>FULL OUTER JOIN,  list all values, but filtered in WHERE clause</text></argument><argument name="page_size"><enumeral>Default</enumeral></argument><argument name="substitutions"><set/></argument><argument name="backup_file_path"><text/></argument><argument name="user_name"><text>SYSDBA</text></argument><argument name="resources"><set/></argument><argument name="expected_stderr"><text/></argument><argument name="target_version"><text>1.5</text></argument><argument name="description"><text>TableX FULL OUTER JOIN TableY with relation in the ON clause.
Three tables are used, where 1 table (RC) holds references to the two other tables (R and C). The two tables R and C contain both 1 value that isn't inside RC.</text></argument><argument name="target_group"><text>.*</text></argument><argument name="populate_method"><enumeral>Using SQL Commands</enumeral></argument><argument name="bug_id"><text/></argument><argument name="data_tuple"><text/></argument><argument name="db_name"><text>full_join.fdb</text></argument><argument name="isql_script"><text>CREATE TABLE Relations (
  RelationID INTEGER,
  RelationName VARCHAR(35)
);

CREATE TABLE Categories (
  CategoryID INTEGER,
  Description VARCHAR(20)
);

CREATE TABLE RelationCategories (
  RelationID INTEGER,
  CategoryID INTEGER
);

COMMIT;

INSERT INTO Relations (RelationID, RelationName) VALUES (1, 'Diving Snorkel Shop');
INSERT INTO Relations (RelationID, RelationName) VALUES (2, 'Bakery garbage');
INSERT INTO Relations (RelationID, RelationName) VALUES (3, 'Racing turtle');
INSERT INTO Relations (RelationID, RelationName) VALUES (4, 'Folding air-hook shop');

INSERT INTO Categories (CategoryID, Description) VALUES (1, 'Relation');
INSERT INTO Categories (CategoryID, Description) VALUES (2, 'Debtor');
INSERT INTO Categories (CategoryID, Description) VALUES (3, 'Creditor');
INSERT INTO Categories (CategoryID, Description) VALUES (4, 'Newsletter');

INSERT INTO RelationCategories (RelationID, CategoryID) VALUES (1, 1);
INSERT INTO RelationCategories (RelationID, CategoryID) VALUES (2, 1);
INSERT INTO RelationCategories (RelationID, CategoryID) VALUES (3, 1);
INSERT INTO RelationCategories (RelationID, CategoryID) VALUES (1, 2);
INSERT INTO RelationCategories (RelationID, CategoryID) VALUES (2, 2);
INSERT INTO RelationCategories (RelationID, CategoryID) VALUES (1, 3);

/* Normally these indexes are created by the primary/foreign keys,
   but we don't want to rely on them for this test */
CREATE UNIQUE ASC INDEX PK_Relations ON Relations (RelationID);
CREATE UNIQUE ASC INDEX PK_Categories ON Categories (CategoryID);
CREATE UNIQUE ASC INDEX PK_RelationCategories ON RelationCategories (RelationID, CategoryID);
CREATE ASC INDEX FK_RC_Relations ON RelationCategories (RelationID);
CREATE ASC INDEX FK_RC_Categories ON RelationCategories (CategoryID);

COMMIT;
</text></argument><argument name="source_code"><text>SET PLAN ON;
/* FULL JOIN should return ... */
SELECT
  r.RelationName,
  rc.RelationID,
  rc.CategoryID,
  c.Description
FROM
  Relations r
  FULL JOIN RelationCategories rc ON (rc.RelationID = r.RelationID)
  FULL JOIN Categories c ON (c.CategoryID = rc.CategoryID)
WHERE
  r.RelationID &gt;= 2
ORDER BY
  rc.RelationID DESC;
</text></argument><argument name="test_id"><text>opt_full_join_02</text></argument><argument name="target_platform"><text>All</text></argument><argument name="insert_statement"><text/></argument><argument name="test_expr"><text/></argument><argument name="statement_type_and_result"><enumeral>SQL: String</enumeral></argument><argument name="prerequisites"><set/></argument><argument name="author"><text>arno.brinkman</text></argument><argument name="drop_db"><enumeral>true</enumeral></argument><argument name="db_path_property"><text>database_location</text></argument></extension>