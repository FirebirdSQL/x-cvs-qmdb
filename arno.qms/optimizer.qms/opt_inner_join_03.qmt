<?xml version="1.0" ?>
<!DOCTYPE extension
  PUBLIC '-//QM/2.2/Extension//EN'
  'http://www.codesourcery.com/qm/dtds/2.2/-//qm/2.2/extension//en.dtd'>
<extension class="fbqa.FirebirdTest" kind="test"><argument name="create_db_method"><enumeral>Create New</enumeral></argument><argument name="user_password"><text>masterkey</text></argument><argument name="sql_dialect"><enumeral>3</enumeral></argument><argument name="result_string"><text>PLAN JOIN (T1 NATURAL,T5 INDEX (PK_TABLE_5),T10 INDEX (PK_TABLE_10),T50 INDEX (PK_TABLE_50),T100 INDEX (PK_TABLE_100),T250 INDEX (PK_TABLE_250),T500 INDEX (PK_TABLE_500),T750 INDEX (PK_TABLE_750),T1000 INDEX (PK_TABLE_1000))

       COUNT 
============ 

           1 
</text></argument><argument name="character_set"><enumeral>NONE</enumeral></argument><argument name="title"><text>INNER JOIN join order</text></argument><argument name="page_size"><enumeral>Default</enumeral></argument><argument name="substitutions"><set/></argument><argument name="backup_file_path"><text/></argument><argument name="user_name"><text>SYSDBA</text></argument><argument name="resources"><set/></argument><argument name="expected_stderr"><text/></argument><argument name="target_version"><text>1.5</text></argument><argument name="description"><text>With a INNER JOIN the relation with the smallest expected result should be the first one in process order. The next relation should be the next relation with expected smallest result based on previous relation and do on till last relation.

Old/Current limitation in Firebird does stop checking order possibilties above 7 relations.</text></argument><argument name="target_group"><text>.*</text></argument><argument name="populate_method"><enumeral>Using SQL Commands</enumeral></argument><argument name="bug_id"><text/></argument><argument name="data_tuple"><text/></argument><argument name="db_name"><text>full_join.fdb</text></argument><argument name="isql_script"><text>CREATE TABLE Table_1 (
  ID INTEGER NOT NULL
);

CREATE TABLE Table_5 (
  ID INTEGER NOT NULL
);

CREATE TABLE Table_10 (
  ID INTEGER NOT NULL
);

CREATE TABLE Table_50 (
  ID INTEGER NOT NULL
);

CREATE TABLE Table_100 (
  ID INTEGER NOT NULL
);

CREATE TABLE Table_250 (
  ID INTEGER NOT NULL
);

CREATE TABLE Table_500 (
  ID INTEGER NOT NULL
);

CREATE TABLE Table_750 (
  ID INTEGER NOT NULL
);

CREATE TABLE Table_1000 (
  ID INTEGER NOT NULL
);

SET TERM ^^ ;
CREATE PROCEDURE PR_FillTable_5
AS
DECLARE VARIABLE FillID INTEGER;
BEGIN
  FillID = 1;
  WHILE (FillID &lt;= 5) DO
  BEGIN
    INSERT INTO Table_5 (ID) VALUES (:FillID);
    FillID = FillID + 1;
  END
END
^^

CREATE PROCEDURE PR_FillTable_10
AS
DECLARE VARIABLE FillID INTEGER;
BEGIN
  FillID = 1;
  WHILE (FillID &lt;= 10) DO
  BEGIN
    INSERT INTO Table_10 (ID) VALUES (:FillID);
    FillID = FillID + 1;
  END
END
^^

CREATE PROCEDURE PR_FillTable_50
AS
DECLARE VARIABLE FillID INTEGER;
BEGIN
  FillID = 1;
  WHILE (FillID &lt;= 50) DO
  BEGIN
    INSERT INTO Table_50 (ID) VALUES (:FillID);
    FillID = FillID + 1;
  END
END
^^

CREATE PROCEDURE PR_FillTable_100
AS
DECLARE VARIABLE FillID INTEGER;
BEGIN
  FillID = 1;
  WHILE (FillID &lt;= 100) DO
  BEGIN
    INSERT INTO Table_100 (ID) VALUES (:FillID);
    FillID = FillID + 1;
  END
END
^^

CREATE PROCEDURE PR_FillTable_250
AS
DECLARE VARIABLE FillID INTEGER;
BEGIN
  FillID = 1;
  WHILE (FillID &lt;= 250) DO
  BEGIN
    INSERT INTO Table_250 (ID) VALUES (:FillID);
    FillID = FillID + 1;
  END
END
^^

CREATE PROCEDURE PR_FillTable_500
AS
DECLARE VARIABLE FillID INTEGER;
BEGIN
  FillID = 1;
  WHILE (FillID &lt;= 500) DO
  BEGIN
    INSERT INTO Table_500 (ID) VALUES (:FillID);
    FillID = FillID + 1;
  END
END
^^

CREATE PROCEDURE PR_FillTable_750
AS
DECLARE VARIABLE FillID INTEGER;
BEGIN
  FillID = 1;
  WHILE (FillID &lt;= 750) DO
  BEGIN
    INSERT INTO Table_750 (ID) VALUES (:FillID);
    FillID = FillID + 1;
  END
END
^^

CREATE PROCEDURE PR_FillTable_1000
AS
DECLARE VARIABLE FillID INTEGER;
BEGIN
  FillID = 1;
  WHILE (FillID &lt;= 1000) DO
  BEGIN
    INSERT INTO Table_1000 (ID) VALUES (:FillID);
    FillID = FillID + 1;
  END
END
^^
SET TERM ; ^^

COMMIT;

INSERT INTO Table_1 (ID) VALUES (1);
EXECUTE PROCEDURE PR_FillTable_5;
EXECUTE PROCEDURE PR_FillTable_10;
EXECUTE PROCEDURE PR_FillTable_50;
EXECUTE PROCEDURE PR_FillTable_100;
EXECUTE PROCEDURE PR_FillTable_250;
EXECUTE PROCEDURE PR_FillTable_500;
EXECUTE PROCEDURE PR_FillTable_750;
EXECUTE PROCEDURE PR_FillTable_1000;

CREATE UNIQUE ASC INDEX PK_Table_1 ON Table_1 (ID);
CREATE UNIQUE ASC INDEX PK_Table_5 ON Table_5 (ID);
CREATE UNIQUE ASC INDEX PK_Table_10 ON Table_10 (ID);
CREATE UNIQUE ASC INDEX PK_Table_50 ON Table_50 (ID);
CREATE UNIQUE ASC INDEX PK_Table_100 ON Table_100 (ID);
CREATE UNIQUE ASC INDEX PK_Table_250 ON Table_250 (ID);
CREATE UNIQUE ASC INDEX PK_Table_500 ON Table_500 (ID);
CREATE UNIQUE ASC INDEX PK_Table_750 ON Table_750 (ID);
CREATE UNIQUE ASC INDEX PK_Table_1000 ON Table_1000 (ID);

COMMIT;
</text></argument><argument name="source_code"><text>SET PLAN ON;
SELECT
  Count(*)
FROM
  Table_250 t250
  JOIN Table_500 t500 ON (t500.ID = t250.ID)
  JOIN Table_750 t750 ON (t750.ID = t500.ID)
  JOIN Table_1000 t1000 ON (t1000.ID = t750.ID)
  JOIN Table_50 t50 ON (t50.ID = t1000.ID)
  JOIN Table_100 t100 ON (t100.ID = t50.ID)
  JOIN Table_5 t5 ON (t5.ID = t100.ID)
  JOIN Table_10 t10 ON (t10.ID = t5.ID)
  JOIN Table_1 t1 ON (t1.ID = t10.ID);
</text></argument><argument name="test_id"><text>opt_inner_join_03</text></argument><argument name="target_platform"><text>All</text></argument><argument name="insert_statement"><text/></argument><argument name="test_expr"><text/></argument><argument name="statement_type_and_result"><enumeral>SQL: String</enumeral></argument><argument name="prerequisites"><set/></argument><argument name="author"><text>arno.brinkman</text></argument><argument name="drop_db"><enumeral>true</enumeral></argument><argument name="db_path_property"><text>database_location</text></argument></extension>